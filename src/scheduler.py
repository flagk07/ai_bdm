from __future__ import annotations

from datetime import date, datetime, timedelta
from typing import Callable, Dict, Tuple, List

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz

from .config import get_settings
from .db import Database


class StatsScheduler:
	def __init__(self, db: Database, push_func: Callable[[int, str], None]):
		self.db = db
		self.push_func = push_func
		self.scheduler = AsyncIOScheduler(timezone=pytz.timezone(get_settings().timezone))

	def _week_range(self, day: date) -> Tuple[date, date]:
		start = day - timedelta(days=day.weekday())
		return start, day

	def _prev_week_range(self, day: date) -> Tuple[date, date]:
		start_this, _ = self._week_range(day)
		end_prev = start_this - timedelta(days=1)
		start_prev = end_prev - timedelta(days=end_prev.weekday())
		return start_prev, end_prev

	def _month_range(self, day: date) -> Tuple[date, date]:
		return day.replace(day=1), day

	def _prev_month_range(self, day: date) -> Tuple[date, date]:
		first = day.replace(day=1)
		end_prev = first - timedelta(days=1)
		start_prev = end_prev.replace(day=1)
		return start_prev, end_prev

	def _delta_pct(self, current: int, previous: int) -> int:
		base = previous if previous > 0 else 1
		return int(round((current - previous) * 100 / base))

	async def _send_daily(self) -> None:
		today = date.today()
		# get all employees
		emps = self.db.client.table("employees").select("tg_id, agent_name, active").eq("active", True).execute()
		for r in (emps.data or []):
			stats = self.db.stats_day_week_month(int(r["tg_id"]), today)
			text = (
				f"{r['agent_name']}: —Å–µ–≥–æ–¥–Ω—è {stats['today']['total']}, –Ω–µ–¥–µ–ª—è {stats['week']['total']}, –º–µ—Å—è—Ü {stats['month']['total']}"
			)
			await self.push_func(int(r["tg_id"]), text)

	def _coach_lines(self, today_by: Dict[str, int], d_day: int, d_week: int, d_month: int) -> List[str]:
		lines: List[str] = []
		# 1) –ï—Å–ª–∏ —Å–ø–∞–¥ —Å–µ–≥–æ–¥–Ω—è ‚Äî —É—Ç–æ—á–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
		if d_day < 0:
			lines.append(f"1. –°–ø–∞–¥ —Å–µ–≥–æ–¥–Ω—è (Œî {d_day}%). –ß—Ç–æ –º–µ—à–∞–µ—Ç: —Ç—Ä–∞—Ñ–∏–∫, –æ—Ç–∫–∞–∑, —Å–∫—Ä–∏–ø—Ç?")
			lines.append("2. –î–µ–π—Å—Ç–≤–∏–µ: —Å–¥–µ–ª–∞–π—Ç–µ 3 –¥–æ–ø. –ø–æ–ø—ã—Ç–∫–∏ –ø–æ —Å–∏–ª—å–Ω–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è.")
		# 2) –ï—Å–ª–∏ –Ω–µ–¥–µ–ª—è –ø—Ä–æ—Å–µ–¥–∞–µ—Ç ‚Äî –ø–ª–∞–Ω
		elif d_week < 0:
			lines.append(f"1. –ù–µ–¥–µ–ª—è –ø—Ä–æ—Å–µ–¥–∞–µ—Ç (Œî {d_week}%). –ì–¥–µ —Ç–µ—Ä—è–µ–º: –ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞ –∏–ª–∏ –¥–æ–∂–∏–º?")
			lines.append("2. –î–µ–π—Å—Ç–≤–∏–µ: –¥–æ–±–∞–≤—å—Ç–µ 5 —Ü–µ–ª–µ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å–º–µ–Ω–µ.")
		# 3) –ï—Å–ª–∏ –º–µ—Å—è—Ü –ø—Ä–æ—Å–µ–¥–∞–µ—Ç ‚Äî –ø–µ—Ä–µ—Å–±–æ—Ä –ø–ª–∞–Ω–∞
		elif d_month < 0:
			lines.append(f"1. –ú–µ—Å—è—Ü –Ω–∏–∂–µ —Ç–µ–º–ø–∞ (Œî {d_month}%).")
			lines.append("2. –î–µ–π—Å—Ç–≤–∏–µ: –ø–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ 2 –ø—Ä–æ–¥—É–∫—Ç–∞–º —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –≤–æ—Ä–æ–Ω–∫–æ–π.")
		# 4) –ò–Ω–∞—á–µ ‚Äî —É—Å–∏–ª–µ–Ω–∏–µ —Å–∏–ª—å–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
		else:
			# –ù–∞–π—Ç–∏ —Å–∏–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å–µ–≥–æ–¥–Ω—è
			top = None
			if today_by:
				top = max(today_by.items(), key=lambda x: x[1])
			if top and top[1] > 0:
				lines.append(f"1. –°–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞: {top[0]} ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ —Ç–µ–º–ø–µ.")
				lines.append("2. –î–µ–π—Å—Ç–≤–∏–µ: –¥–æ–±–∞–≤—å—Ç–µ —Å–º–µ–∂–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–∞–∂–¥—ã–π –¥–∏–∞–ª–æ–≥.")
			else:
				lines.append("1. –°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç –ø–æ–ø—ã—Ç–æ–∫ ‚Äî –Ω–∞—á–Ω–∏—Ç–µ —Å 3 –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É.")
				lines.append("2. –î–µ–π—Å—Ç–≤–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π —Å–∫—Ä–∏–ø—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å.")
		return lines

	async def _send_periodic(self) -> None:
		today = date.today()
		start_week, end_week = self._week_range(today)
		start_prev_w, end_prev_w = self._prev_week_range(today)
		start_month, end_month = self._month_range(today)
		start_prev_m, end_prev_m = self._prev_month_range(today)

		emps = self.db.client.table("employees").select("tg_id, agent_name, active").eq("active", True).execute()
		for r in (emps.data or []):
			tg = int(r["tg_id"])
			name = r["agent_name"]
			# current totals and breakdown for today
			today_total, today_by = self.db._sum_attempts_query(tg, today, today)
			# Guard: ensure today_total equals sum of breakdown
			sum_by = sum((today_by or {}).values())
			if sum_by != today_total:
				try:
					self.db.log(tg, "today_total_mismatch", {"expected_total": today_total, "sum_by": sum_by, "by": today_by})
				except Exception:
					pass
				today_total = sum_by
			week_total, _ = self.db._sum_attempts_query(tg, start_week, end_week)
			month_total, _ = self.db._sum_attempts_query(tg, start_month, end_month)
			# previous totals
			prev_day_total, _ = self.db._sum_attempts_query(tg, today - timedelta(days=1), today - timedelta(days=1))
			prev_week_total, _ = self.db._sum_attempts_query(tg, start_prev_w, end_prev_w)
			prev_month_total, _ = self.db._sum_attempts_query(tg, start_prev_m, end_prev_m)
			# deltas
			d_day = self._delta_pct(today_total, prev_day_total)
			d_week = self._delta_pct(week_total, prev_week_total)
			d_month = self._delta_pct(month_total, prev_month_total)
			# format breakdown like "2–ö–ù, 3–ö–°–ü"
			items = [(p, c) for p, c in (today_by or {}).items() if c > 0]
			items.sort(key=lambda x: (-x[1], x[0]))
			breakdown = ", ".join([f"{c}{p}" for p, c in items]) if items else "‚Äî"
			# message header and lines with "- "
			header = f"{name} ‚Äî –∞–≤—Ç–æ‚Äë—Å–≤–æ–¥–∫–∞\n"
			lines = [
				f"- –°–µ–≥–æ–¥–Ω—è: {today_total} (Œî {d_day}%) üéØ",
				f"- –°–µ–≥–æ–¥–Ω—è –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º: {breakdown}",
				f"- –ù–µ–¥–µ–ª—è: {week_total} (Œî {d_week}%) üìÖ",
				f"- –ú–µ—Å—è—Ü: {month_total} (Œî {d_month}%) üìä",
			]
			coach = self._coach_lines(today_by or {}, d_day, d_week, d_month)
			text = header + "\n".join(lines) + "\n" + "\n".join(coach) + "\n" + "–û–±—Å—É–¥–∏—Ç—å —Å –ø–æ–º–æ—â–Ω–∏–∫–æ–º: /assistant"
			await self.push_func(tg, text)

	def start(self) -> None:
		# Daily at 20:00 local time
		self.scheduler.add_job(self._send_daily, CronTrigger(hour=20, minute=0))
		# Every 5 minutes periodic summary (test mode)
		self.scheduler.add_job(self._send_periodic, CronTrigger(minute="*/5"))
		self.scheduler.start() 